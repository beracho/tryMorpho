/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}


#include <string>


#include "MORPHO_Types.h"
#include "MSOSECU.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "MSOSECU_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_TRIPLE_1DES_1KEY_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(24);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_DES_1BLOCK_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_AES128_1BLOCK_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(16);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_getHostCertif(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jint jresult = 0 ;
  PUL arg1 ;
  PUC *arg2 = (PUC *) 0 ;
  PUC l_puc_Data1 = NULL ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    arg2 = &l_puc_Data1;
    UL DataSize = 0;
    arg1 = &DataSize;
  }
  result = (I)MSOSECU_GetHostCertif(arg1,arg2);
  jresult = (jint)result; 
  {
    if(jarg1 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg1 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      jbyte* b = (jbyte*)l_puc_Data1;
      for(UL i=0; i<(*arg1); i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg1, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
        
      }
    }
    
    if(l_puc_Data1 != NULL)
    {
      MSOSECU_Free(&l_puc_Data1);
    }
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_genRandom(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  PUC l_auc_random = NULL;
  if(jarg1 != NULL)
  {
    arg1 = (UL)jenv->GetArrayLength(jarg1);
    if(arg1 < 0) return -2000;
    l_auc_random = (PUC)malloc(arg1);
    arg2 = l_auc_random;
  }
  else
  {
    arg1 = 0;
    arg2 = NULL;
  }
  result = (I)MSOSECU_GenRandom(arg1,arg2);
  jresult = (jint)result; 
  {
    if(jresult == 0 && jarg1 != NULL)
    {
      jenv->SetByteArrayRegion(jarg1, 0, (UL)jenv->GetArrayLength(jarg1), (jbyte *) l_auc_random);
    }
    
    if(l_auc_random != NULL)
    {
      free(l_auc_random);
    }
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tunnelingInit1(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbyteArray jarg5, jbyteArray jarg7, jobject jarg9) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  UL arg5 ;
  PUC arg6 ;
  UL arg7 ;
  PUC arg8 ;
  PUL arg9 ;
  PUC *arg10 = (PUC *) 0 ;
  PVOID arg11 ;
  PUC l_puc_Data9 = NULL ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    arg11 = 0;
  }
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg6 = (PUC)jenv->GetByteArrayElements(jarg5, 0);
      arg5 = (UL)jenv->GetArrayLength(jarg5);
    }
    else
    {
      arg6 = NULL;
      arg5 = 0;
    }
  }
  {
    if(jarg7 != NULL)
    {
      arg8 = (PUC)jenv->GetByteArrayElements(jarg7, 0);
      arg7 = (UL)jenv->GetArrayLength(jarg7);
    }
    else
    {
      arg8 = NULL;
      arg7 = 0;
    }
  }
  {
    arg10 = &l_puc_Data9;
    UL DataSize = 0;
    arg9 = &DataSize;
  }
  result = (I)MSOSECU_TunnelingInit1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg6, 0);
    }
  }
  {
    if(jarg7 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg7, (jbyte *)arg8, 0);
    }
  }
  {
    if(jarg9 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg9 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      jbyte* b = (jbyte*)l_puc_Data9;
      for(UL i=0; i<(*arg9); i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg9, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
        
      }
    }
    
    if(l_puc_Data9 != NULL)
    {
      MSOSECU_Free(&l_puc_Data9);
    }
  }
  {
    
  }
  
  
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tunnelingInit2(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  result = (I)MSOSECU_TunnelingInit2(arg1,arg2);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tripleDesSign(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jobject jarg3) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  PUC arg3 ;
  PUC l_puc_DataReceive3 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  UL size = 8;
  l_puc_DataReceive3 = (PUC) malloc(size);
  arg3 = l_puc_DataReceive3;
  result = (I)MSOSECU_TripleDesSign(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg3 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      
      jbyte* b = (jbyte*)l_puc_DataReceive3;		
      for(UL i=0;i<size;i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg3, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
      }
    }
    
    if(l_puc_DataReceive3 != NULL)
    {
      free(l_puc_DataReceive3);
    }
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tripleDesCrypt(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jobject jarg3) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  PUC arg3 ;
  PUC l_puc_DataReceive3 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  UL size = arg1;
  l_puc_DataReceive3 = (PUC) malloc(size);
  arg3 = l_puc_DataReceive3;
  result = (I)MSOSECU_TripleDesCrypt(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jresult == 0 && jarg3 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      
      jbyte* b = (jbyte*)l_puc_DataReceive3;		
      for(UL i=0;i<size;i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg3, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
      }
    }
    
    if(l_puc_DataReceive3 != NULL)
    {
      free(l_puc_DataReceive3);
    }
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_desCrypt(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jobject jarg4) {
  jint jresult = 0 ;
  PC arg1 ;
  UL arg2 ;
  PUC arg3 ;
  PUC arg4 ;
  PUC l_puc_DataReceive4 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg1 = (char *) jenv->GetByteArrayElements(jarg1, 0);
    }
    else
    {
      arg1 = NULL;
    }
  }
  {
    if(jarg2 != NULL)
    {
      arg3 = (PUC)jenv->GetByteArrayElements(jarg2, 0);
      arg2 = (UL)jenv->GetArrayLength(jarg2);
    }
    else
    {
      arg3 = NULL;
      arg2 = 0;
    }
  }
  UL size = arg2;
  l_puc_DataReceive4 = (PUC) malloc(size);
  arg4 = l_puc_DataReceive4;
  result = (I)MSOSECU_DesCrypt(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    if(jresult == 0 && jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
    }
  }
  {
    if(jarg2 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg3, 0);
    }
  }
  {
    if(jresult == 0 && jarg4 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      
      jbyte* b = (jbyte*)l_puc_DataReceive4;		
      for(UL i=0;i<size;i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg4, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
      }
    }
    
    if(l_puc_DataReceive4 != NULL)
    {
      free(l_puc_DataReceive4);
    }
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tripleDesVerifSign(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbooleanArray jarg4) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  PUC arg3 ;
  BOOL *arg4 = (BOOL *) 0 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg3 = (unsigned char *) jenv->GetByteArrayElements(jarg3, 0);
    }
    else
    {
      arg3 = NULL;
    }
  }
  {
    if(jarg4 != NULL)
    {
      arg4 = (BOOL *) jenv->GetBooleanArrayElements(jarg4, 0);
    }
    else
    {
      arg4 = NULL;
    }
  }
  result = (I)MSOSECU_TripleDesVerifSign(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, 0);
    }
    else
    {
      arg3 = NULL;
    }
  }
  {
    if(jarg4 != NULL)
    {
      jenv->ReleaseBooleanArrayElements(jarg4, (jboolean *) arg4, 0);
    }
    else
    {
      arg4 = NULL;
    }
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tripleDesDecrypt(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jobject jarg3) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  PUC arg3 ;
  PUC l_puc_DataReceive3 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  UL size = arg1;
  l_puc_DataReceive3 = (PUC) malloc(size);
  arg3 = l_puc_DataReceive3;
  result = (I)MSOSECU_TripleDesDecrypt(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jresult == 0 && jarg3 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      
      jbyte* b = (jbyte*)l_puc_DataReceive3;		
      for(UL i=0;i<size;i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg3, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
      }
    }
    
    if(l_puc_DataReceive3 != NULL)
    {
      free(l_puc_DataReceive3);
    }
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_verifOfferedSecuritySignature(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbyteArray jarg5, jintArray jarg7) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  UL arg5 ;
  PUC arg6 ;
  PI arg7 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg6 = (PUC)jenv->GetByteArrayElements(jarg5, 0);
      arg5 = (UL)jenv->GetArrayLength(jarg5);
    }
    else
    {
      arg6 = NULL;
      arg5 = 0;
    }
  }
  {
    if(jarg7 != NULL)
    {
      arg7 = (int *) jenv->GetIntArrayElements(jarg7, 0);
    }
    else
    {
      arg7 = NULL;
    }
  }
  result = (I)MSOSECU_VerifOfferedSecuritySignature(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg6, 0);
    }
  }
  {
    if(jarg7 != NULL)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint *) arg7, 0);
    }
    else
    {
      arg7 = NULL;
    }
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_verifSignRSA(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbyteArray jarg5, jintArray jarg7) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  UL arg5 ;
  PUC arg6 ;
  PI arg7 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg6 = (PUC)jenv->GetByteArrayElements(jarg5, 0);
      arg5 = (UL)jenv->GetArrayLength(jarg5);
    }
    else
    {
      arg6 = NULL;
      arg5 = 0;
    }
  }
  {
    if(jarg7 != NULL)
    {
      arg7 = (int *) jenv->GetIntArrayElements(jarg7, 0);
    }
    else
    {
      arg7 = NULL;
    }
  }
  result = (I)MSOSECU_VerifSignRSA(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg6, 0);
    }
  }
  {
    if(jarg7 != NULL)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint *) arg7, 0);
    }
    else
    {
      arg7 = NULL;
    }
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_verifSignDSA(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbyteArray jarg5, jintArray jarg7) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  UL arg5 ;
  PUC arg6 ;
  PI arg7 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg6 = (PUC)jenv->GetByteArrayElements(jarg5, 0);
      arg5 = (UL)jenv->GetArrayLength(jarg5);
    }
    else
    {
      arg6 = NULL;
      arg5 = 0;
    }
  }
  {
    if(jarg7 != NULL)
    {
      arg7 = (int *) jenv->GetIntArrayElements(jarg7, 0);
    }
    else
    {
      arg7 = NULL;
    }
  }
  result = (I)MSOSECU_VerifSignDSA(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg6, 0);
    }
  }
  {
    if(jarg7 != NULL)
    {
      jenv->ReleaseIntArrayElements(jarg7, (jint *) arg7, 0);
    }
    else
    {
      arg7 = NULL;
    }
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_verifCertif(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jintArray jarg3) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  PI arg3 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg3 = (int *) jenv->GetIntArrayElements(jarg3, 0);
    }
    else
    {
      arg3 = NULL;
    }
  }
  result = (I)MSOSECU_VerifCertif(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseIntArrayElements(jarg3, (jint *) arg3, 0);
    }
    else
    {
      arg3 = NULL;
    }
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_tripleDesCryptByKey(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jobject jarg4) {
  jint jresult = 0 ;
  PUC arg1 ;
  UL arg2 ;
  PUC arg3 ;
  PUC arg4 ;
  PUC l_puc_DataReceive4 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
    }
    else
    {
      arg1 = NULL;
    }
  }
  {
    if(jarg2 != NULL)
    {
      arg3 = (PUC)jenv->GetByteArrayElements(jarg2, 0);
      arg2 = (UL)jenv->GetArrayLength(jarg2);
    }
    else
    {
      arg3 = NULL;
      arg2 = 0;
    }
  }
  UL size = arg2;
  l_puc_DataReceive4 = (PUC) malloc(size);
  arg4 = l_puc_DataReceive4;
  result = (I)MSOSECU_TripleDesCryptByKey(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
    }
    else
    {
      arg1 = NULL;
    }
  }
  {
    if(jarg2 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg3, 0);
    }
  }
  {
    if(jresult == 0 && jarg4 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      
      jbyte* b = (jbyte*)l_puc_DataReceive4;		
      for(UL i=0;i<size;i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg4, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
      }
    }
    
    if(l_puc_DataReceive4 != NULL)
    {
      free(l_puc_DataReceive4);
    }
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_rsaEncrypt(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jobject jarg5) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  PUL arg5 ;
  PUC *arg6 = (PUC *) 0 ;
  PUC l_puc_Data5 = NULL ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    arg6 = &l_puc_Data5;
    UL DataSize = 0;
    arg5 = &DataSize;
  }
  result = (I)MSOSECU_RSA_Encrypt(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg5 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      jbyte* b = (jbyte*)l_puc_Data5;
      for(UL i=0; i<(*arg5); i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg5, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
        
      }
    }
    
    if(l_puc_Data5 != NULL)
    {
      MSOSECU_Free(&l_puc_Data5);
    }
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_signRSA(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jobject jarg5) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  PUL arg5 ;
  PUC *arg6 = (PUC *) 0 ;
  PUC l_puc_Data5 = NULL ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    arg6 = &l_puc_Data5;
    UL DataSize = 0;
    arg5 = &DataSize;
  }
  result = (I)MSOSECU_SignRSA(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg5 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      jbyte* b = (jbyte*)l_puc_Data5;
      for(UL i=0; i<(*arg5); i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg5, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
        
      }
    }
    
    if(l_puc_Data5 != NULL)
    {
      MSOSECU_Free(&l_puc_Data5);
    }
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_encrypt3DesCbcNopad(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg2, jint jarg3, jbyteArray jarg4, jbyteArray jarg5) {
  jint jresult = 0 ;
  UC *arg1 ;
  PUC arg2 ;
  I arg3 ;
  UC *arg4 ;
  PUC arg5 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg1 = (unsigned char *) jenv->GetByteArrayElements(jarg1, 0);
    }
    else
    {
      arg1 = NULL;
    }
  }
  {
    if(jarg2 != NULL)
    {
      arg2 = (unsigned char *) jenv->GetByteArrayElements(jarg2, 0);
    }
    else
    {
      arg2 = NULL;
    }
  }
  arg3 = (I)jarg3; 
  {
    if(jarg4 != NULL)
    {
      arg4 = (unsigned char *) jenv->GetByteArrayElements(jarg4, 0);
    }
    else
    {
      arg4 = NULL;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg5 = (unsigned char *) jenv->GetByteArrayElements(jarg5, 0);
    }
    else
    {
      arg5 = NULL;
    }
  }
  result = (I)MSOSECU_encrypt_3des_cbc_nopad((UC const (*))arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *) arg1, 0);
    }
    else
    {
      arg1 = NULL;
    }
  }
  {
    if(jarg2 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0);
    }
    else
    {
      arg2 = NULL;
    }
  }
  {
    if(jarg4 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg4, (jbyte *) arg4, 0);
    }
    else
    {
      arg4 = NULL;
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *) arg5, 0);
    }
    else
    {
      arg5 = NULL;
    }
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_setOpenSSLPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  PUC arg1 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg1 = (PUC)jenv->GetStringUTFChars(jarg1, JNI_FALSE);
    }
    else
    {
      arg1 = NULL;
    }
  }
  result = (I)MSOSECU_SetOpenSSLPath(arg1);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseStringUTFChars(jarg1, (const char*)arg1);
    }
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_encryptAes128Cbc(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbyteArray jarg5, jboolean jarg6, jobject jarg7) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  UC *arg5 ;
  BOOL arg6 ;
  PUL arg7 ;
  PUC *arg8 = (PUC *) 0 ;
  PUC l_puc_Data7 = NULL ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg5 = (unsigned char *) jenv->GetByteArrayElements(jarg5, 0);
    }
    else
    {
      arg5 = NULL;
    }
  }
  arg6 = jarg6 ? true : false; 
  {
    arg8 = &l_puc_Data7;
    UL DataSize = 0;
    arg7 = &DataSize;
  }
  result = (I)MSOSECU_encrypt_aes128_cbc(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *) arg5, 0);
    }
    else
    {
      arg5 = NULL;
    }
  }
  {
    if(jarg7 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg7 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      jbyte* b = (jbyte*)l_puc_Data7;
      for(UL i=0; i<(*arg7); i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg7, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
        
      }
    }
    
    if(l_puc_Data7 != NULL)
    {
      MSOSECU_Free(&l_puc_Data7);
    }
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_decryptAes128Cbc(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jbyteArray jarg3, jbyteArray jarg5, jboolean jarg6, jobject jarg7) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  PUC arg4 ;
  UC *arg5 ;
  BOOL arg6 ;
  PUL arg7 ;
  PUC *arg8 = (PUC *) 0 ;
  PUC l_puc_Data7 = NULL ;
  I result;
  
  (void)jenv;
  (void)jcls;
  {
    if(jarg1 != NULL)
    {
      arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
      arg1 = (UL)jenv->GetArrayLength(jarg1);
    }
    else
    {
      arg2 = NULL;
      arg1 = 0;
    }
  }
  {
    if(jarg3 != NULL)
    {
      arg4 = (PUC)jenv->GetByteArrayElements(jarg3, 0);
      arg3 = (UL)jenv->GetArrayLength(jarg3);
    }
    else
    {
      arg4 = NULL;
      arg3 = 0;
    }
  }
  {
    if(jarg5 != NULL)
    {
      arg5 = (unsigned char *) jenv->GetByteArrayElements(jarg5, 0);
    }
    else
    {
      arg5 = NULL;
    }
  }
  arg6 = jarg6 ? true : false; 
  {
    arg8 = &l_puc_Data7;
    UL DataSize = 0;
    arg7 = &DataSize;
  }
  result = (I)MSOSECU_decrypt_aes128_cbc(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    if(jarg3 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg3, (jbyte *)arg4, 0);
    }
  }
  {
    if(jarg5 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg5, (jbyte *) arg5, 0);
    }
    else
    {
      arg5 = NULL;
    }
  }
  {
    if(jarg7 == NULL)
    {
      return -2000;
    }
    if(jresult == 0 && jarg7 != NULL)
    {
      jclass arrayListClass = jenv->FindClass("java/util/ArrayList");
      jmethodID addMethod = jenv->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
      jclass cByte = jenv->FindClass("java/lang/Byte");
      jmethodID constr = jenv->GetMethodID(cByte, "<init>", "(B)V");
      jbyte* b = (jbyte*)l_puc_Data7;
      for(UL i=0; i<(*arg7); i++)
      {
        jobject obj_new = jenv->NewObject(cByte, constr, b[i]);
        jenv->CallBooleanMethod(jarg7, addMethod, obj_new);
        jenv->DeleteLocalRef(obj_new);
        
      }
    }
    
    if(l_puc_Data7 != NULL)
    {
      MSOSECU_Free(&l_puc_Data7);
    }
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_computeCRC32(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jlong jarg3, jlong jarg4, jboolean jarg5, jboolean jarg6, jlong jarg7, jlongArray jarg8) {
  jint jresult = 0 ;
  UL arg1 ;
  PUC arg2 ;
  UL arg3 ;
  UL arg4 ;
  BOOL arg5 ;
  BOOL arg6 ;
  UL arg7 ;
  UL *arg8 = (UL *) 0 ;
  UL temp8 ;
  I result;
  
  (void)jenv;
  (void)jcls;
  if(jarg1 != NULL)
  {
    arg1 = (UL)jenv->GetArrayLength(jarg1);
    arg2 = (PUC)jenv->GetByteArrayElements(jarg1, 0);
  }
  else
  {
    arg1 = 0;
    arg2 = NULL;
  }
  arg3 = (UL)jarg3; 
  arg4 = (UL)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (UL)jarg7; 
  {
    if (!jarg8) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg8) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp8 = (UL)0;
    arg8 = &temp8; 
  }
  result = (I)MSOSECU_computeCRC32(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  {
    if(jarg1 != NULL)
    {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, 0);
    }
  }
  {
    jlong jvalue = (jlong)temp8;
    jenv->SetLongArrayRegion(jarg8, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1BAD_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1OPEN_1FILE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1WRITE_1FILE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1READ_1FILE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1DELETE_1FILE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1FILE_1EMPTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2005);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1FILE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2006);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1ALLOC_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2007);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1CRYPTO_1PROTOCOLE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2008);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1OPEN_1SSL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2009);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1INVALID_1CERTIF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2010);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1PARSE_1DER_1TO_1X509STRUCT_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2011);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1STORE_1NEW_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2012);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1STORE_1LOAD_1LOCATIONS_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2013);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1PEM_1READ_1BIO_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2014);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1MODE_1DSA_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2015);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1SHA1_1INIT_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2016);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1SHA1_1UPDATE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2017);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1SHA1_1FINAL_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2018);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1DSS1_1INIT_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2019);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1DSS1_1UPDATE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2020);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1DSS1_1FINAL_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2021);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1BIO_1NEW_1MEM_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2022);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1PARSE_1DATA_1TO_1X509STRUCT_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2023);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1PUBLIC_1KEY_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2024);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1RSA_1KEY_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2025);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1DSA_1KEY_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2026);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1AES128_1INIT_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2027);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1AES128_1UPDATE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2028);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_morpho_msosecu_sdk_api_MsoSecuJNI_MSOSECU_1AES128_1FINAL_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-2029);
  jresult = (jint)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

